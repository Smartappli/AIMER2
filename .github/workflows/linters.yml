name: Linter

on: [push, pull_request]

concurrency:
  group: linter-${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.workflow_ref }}
  cancel-in-progress: true

jobs:
  ruff-lint:
    name: Ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
  
      - uses: astral-sh/setup-uv@v7
        with:
          python-version: 3.12
      
      - uses: astral-sh/ruff-action@v3
        with:
          args: 'check --preview --config ruff.toml --output-format github --diff --exclude assistant/migrations'

      - uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: 'style fixes by ruff'

  flake8-lint:
    runs-on: ubuntu-latest
    name: Flake8
    steps:
      - name: Check out source repository
        uses: actions/checkout@v5
        
      - uses: astral-sh/setup-uv@v7
        with:
          python-version: 3.12

      - name: Print the installed version
        run: uv --version
          
      - name: flake8 Lint
        uses: py-actions/flake8@v2.3.0
        with:
          exclude: "manage.py,blog/migrations,faq/migrations,ticket/migrations,tutorial/migrations,website/migrations,settings.py"
          ignore: "E501,F401,I900,R505,S106,S311,TOR401,W503,W504"
          max-line-length: "80"
          plugins: "TorchFix"

  dj-lint:
    runs-on: ubuntu-latest
    name: Django Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v5
      
      - uses: astral-sh/setup-uv@v7
        with:
          python-version: 3.12

      - name: Print the installed version
        run: uv --version
      
      - name: DjLint Linter
        run: |
          uv pip install djlint
          djlint ./templates --extension=html --lint
          djlint ./templates --extension=html --reformat

  pylint:
    name: PyLint
    needs: [dj-lint,flake8-lint,ruff-lint]
    strategy:
      max-parallel: 20
      matrix:
        os: [macos-12, macos-13, macos-14, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.11", "3.12"]
        exclude:      
          - os: windows-2019
            python-version: "3.10"
          - os: windows-2022
            python-version: "3.10"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: 'pip'
    - name: Install dependencies
      if: ${{ matrix.os == 'macos-12' || matrix.os == 'macos-13' || matrix.os == 'macos-14' }}
      run: |
        mv AIMER2/.env.example AIMER2/.env
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install pylint-dev/pylint-django
        python -m uv pip install -r requirements.txt
    - name: Install dependencies on Windows
      if: ${{ matrix.os == 'windows-2019' || matrix.os == 'windows-2022' }}
      run: |
        cd AIMER2
        ren .env.example .env
        cd..
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install pylint-django
        python -m uv pip install -r ./requirements.txt
    - name: Install dependencies on Ubuntu
      if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04' }}
      run: |
        mv AIMER2/.env.example AIMER2/.env
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install pylint-django
        python -m uv pip install -r requirements.txt
    - name: Analysing the code with pylint
      run: pylint --load-plugins pylint_django --django-settings-module=AIMER2.settings "**/*.py"
